// <auto-generated />
using System;
using Handyman.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Handyman.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250208140637_nullableprofile")]
    partial class nullableprofile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Handyman.Data.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Anytown",
                            Country = "USA",
                            PostalCode = "12345",
                            State = "CA",
                            Street = "123 Main St"
                        },
                        new
                        {
                            Id = 2,
                            City = "Othertown",
                            Country = "USA",
                            PostalCode = "67890",
                            State = "NY",
                            Street = "456 Elm St"
                        });
                });

            modelBuilder.Entity("Handyman.Data.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("ProviderServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerProfileId");

                    b.HasIndex("ProviderServiceId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateTime(2025, 2, 11, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1788),
                            CreatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1793),
                            CustomerNote = "Please make sure to trim the edges.",
                            CustomerProfileId = 1,
                            IsApproved = false,
                            ProviderServiceId = 1,
                            UpdatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1794)
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateTime(2025, 2, 13, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1795),
                            CreatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1796),
                            CustomerNote = "Focus on the kitchen and living room.",
                            CustomerProfileId = 2,
                            IsApproved = false,
                            ProviderServiceId = 2,
                            UpdatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1797)
                        });
                });

            modelBuilder.Entity("Handyman.Data.Entities.AppointmentFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("CustomerProfileId");

                    b.ToTable("AppointmentFeedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            CreatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1812),
                            CustomerProfileId = 1,
                            Feedback = "Great service! Very satisfied.",
                            IsApproved = false,
                            Rating = 5,
                            UpdatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1813)
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            CreatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1815),
                            CustomerProfileId = 2,
                            Feedback = "Good job, but could be more thorough.",
                            IsApproved = false,
                            Rating = 4,
                            UpdatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1816)
                        });
                });

            modelBuilder.Entity("Handyman.Data.Entities.CustomerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Preferences")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("CustomerProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Preferences = "Weekly lawn mowing",
                            ProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Preferences = "Monthly house cleaning",
                            ProfileId = 2
                        });
                });

            modelBuilder.Entity("Handyman.Data.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("CustomerProfileId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 50.00m,
                            AppointmentId = 1,
                            CreatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1847),
                            CustomerProfileId = 1,
                            IsSuccessful = true,
                            PaymentDate = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1846),
                            PaymentMethod = "Credit Card",
                            UpdatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1847)
                        },
                        new
                        {
                            Id = 2,
                            Amount = 75.00m,
                            AppointmentId = 2,
                            CreatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1851),
                            CustomerProfileId = 2,
                            IsSuccessful = true,
                            PaymentDate = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1851),
                            PaymentMethod = "PayPal",
                            UpdatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1852)
                        });
                });

            modelBuilder.Entity("Handyman.Data.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St, Anytown, USA",
                            CreatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1628),
                            Email = "john.doe@example.com",
                            FullName = "John Doe",
                            PhoneNumber = "123-456-7890",
                            Role = "Customer",
                            UpdatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1629),
                            UserId = "customer1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St, Othertown, USA",
                            CreatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1632),
                            Email = "jane.smith@example.com",
                            FullName = "Jane Smith",
                            PhoneNumber = "987-654-3210",
                            Role = "Customer",
                            UpdatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1633),
                            UserId = "customer2"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Oak St, Sometown, USA",
                            CreatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1634),
                            Email = "mike.johnson@example.com",
                            FullName = "Mike Johnson",
                            PhoneNumber = "555-123-4567",
                            Role = "Provider",
                            UpdatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1635),
                            UserId = "provider1"
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 Pine St, Anothertown, USA",
                            CreatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1636),
                            Email = "emily.davis@example.com",
                            FullName = "Emily Davis",
                            PhoneNumber = "555-987-6543",
                            Role = "Provider",
                            UpdatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1637),
                            UserId = "provider2"
                        });
                });

            modelBuilder.Entity("Handyman.Data.Entities.ProviderProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServicesOffered")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("ProviderProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Availability = "Mon-Fri 9am-5pm",
                            ProfileId = 3,
                            Rating = 4.5m,
                            ServicesOffered = "Lawn Mowing, Hedge Trimming"
                        },
                        new
                        {
                            Id = 2,
                            Availability = "Sat-Sun 10am-4pm",
                            ProfileId = 4,
                            Rating = 4.8m,
                            ServicesOffered = "House Cleaning, Carpet Cleaning"
                        });
                });

            modelBuilder.Entity("Handyman.Data.Entities.ProviderService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderProfileId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProviderProfileId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ProviderServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1769),
                            ImageUrl = "https://example.com/images/lawn_mowing.jpg",
                            Notes = "Experienced in lawn mowing with professional equipment.",
                            ProviderProfileId = 1,
                            ServiceId = 1,
                            UpdatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1770)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1772),
                            ImageUrl = "https://example.com/images/house_cleaning.jpg",
                            Notes = "Thorough house cleaning services with eco-friendly products.",
                            ProviderProfileId = 2,
                            ServiceId = 3,
                            UpdatedAt = new DateTime(2025, 2, 8, 14, 6, 37, 376, DateTimeKind.Utc).AddTicks(1772)
                        });
                });

            modelBuilder.Entity("Handyman.Data.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Lawn Mowing",
                            ServiceTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Hedge Trimming",
                            ServiceTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "House Cleaning",
                            ServiceTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Carpet Cleaning",
                            ServiceTypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Pipe Repair",
                            ServiceTypeId = 3
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Leak Detection",
                            ServiceTypeId = 3
                        });
                });

            modelBuilder.Entity("Handyman.Data.Entities.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Services related to lawn maintenance and care.",
                            IsDeleted = false,
                            Name = "Lawn Care"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Services related to cleaning and maintaining the house.",
                            IsDeleted = false,
                            Name = "House Cleaning"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Services related to plumbing and pipe maintenance.",
                            IsDeleted = false,
                            Name = "Plumbing"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Handyman.Data.Entities.Appointment", b =>
                {
                    b.HasOne("Handyman.Data.Entities.CustomerProfile", "CustomerProfile")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Handyman.Data.Entities.ProviderService", "ProviderService")
                        .WithMany("Appointments")
                        .HasForeignKey("ProviderServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomerProfile");

                    b.Navigation("ProviderService");
                });

            modelBuilder.Entity("Handyman.Data.Entities.AppointmentFeedback", b =>
                {
                    b.HasOne("Handyman.Data.Entities.Appointment", "Appointment")
                        .WithOne("AppointmentFeedback")
                        .HasForeignKey("Handyman.Data.Entities.AppointmentFeedback", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Handyman.Data.Entities.CustomerProfile", "CustomerProfile")
                        .WithMany("AppointmentFeedbacks")
                        .HasForeignKey("CustomerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("CustomerProfile");
                });

            modelBuilder.Entity("Handyman.Data.Entities.CustomerProfile", b =>
                {
                    b.HasOne("Handyman.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Handyman.Data.Entities.Profile", "Profile")
                        .WithOne("CustomerProfile")
                        .HasForeignKey("Handyman.Data.Entities.CustomerProfile", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Handyman.Data.Entities.Payment", b =>
                {
                    b.HasOne("Handyman.Data.Entities.Appointment", "Appointment")
                        .WithOne("Payment")
                        .HasForeignKey("Handyman.Data.Entities.Payment", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Handyman.Data.Entities.CustomerProfile", "CustomerProfile")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("CustomerProfile");
                });

            modelBuilder.Entity("Handyman.Data.Entities.ProviderProfile", b =>
                {
                    b.HasOne("Handyman.Data.Entities.Profile", "Profile")
                        .WithOne("ProviderProfile")
                        .HasForeignKey("Handyman.Data.Entities.ProviderProfile", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Handyman.Data.Entities.ProviderService", b =>
                {
                    b.HasOne("Handyman.Data.Entities.ProviderProfile", "ProviderProfile")
                        .WithMany("ProviderServices")
                        .HasForeignKey("ProviderProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Handyman.Data.Entities.Service", "Service")
                        .WithMany("ProviderServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProviderProfile");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Handyman.Data.Entities.Service", b =>
                {
                    b.HasOne("Handyman.Data.Entities.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Handyman.Data.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentFeedback")
                        .IsRequired();

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Handyman.Data.Entities.CustomerProfile", b =>
                {
                    b.Navigation("AppointmentFeedbacks");

                    b.Navigation("Appointments");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Handyman.Data.Entities.Profile", b =>
                {
                    b.Navigation("CustomerProfile")
                        .IsRequired();

                    b.Navigation("ProviderProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("Handyman.Data.Entities.ProviderProfile", b =>
                {
                    b.Navigation("ProviderServices");
                });

            modelBuilder.Entity("Handyman.Data.Entities.ProviderService", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Handyman.Data.Entities.Service", b =>
                {
                    b.Navigation("ProviderServices");
                });

            modelBuilder.Entity("Handyman.Data.Entities.ServiceType", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
